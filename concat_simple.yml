# ================================================================
# Configuration for the File Combiner Tool
# ================================================================

# --- Search Parameters ---
search:
  # List of root folders to search for files.
  root_folders:
    - 'C:\Users\Guest\GitHub\myproject'

  # Whether to search recursively through subdirectories.
  recursive: true

  # List of file extensions to include.
  # If this list is empty or omitted, ALL file extensions will be included
  # (subject to the exclusion rules below). When pairing is enabled, this
  # option is ignored in favour of ``pairing.source_extensions`` and
  # ``pairing.header_extensions``.
  allowed_extensions:
      - '.txt'

# --- Output Configuration ---
output:
  # The path for the final combined text file.
  file: 'combined_files.txt'

  # If true, prints a header like "path/to/file.py:\n```" for each file.
  # Headers are included by default; set this to false to disable them.
  include_headers: false

  # A string to insert between files ONLY when include_headers is false.
  # Use "\n" for a simple newline.
  no_header_separator: "\n"

# --- File Filtering ---
filters:
  # Files smaller than this (in bytes) will be skipped.
  min_size_bytes: 4

  # Files larger than this (in bytes) will be skipped.
  max_size_bytes: 209715200 # 200 MiB

  # --- EXCLUSION RULES ---
  # Files and folders matching these rules will be skipped.
  exclusions:
    # Exclude specific full filenames.
    filenames:

    # Exclude all files with these extensions.
    extensions:

    # Exclude entire folders. The script will not enter these directories.
    # This is case-sensitive.
    folders:
      - '.git'

# --- Content Processing Options ---
processing:
  # If true, attempts to clean up and normalize whitespace.
  normalize_whitespace: false

  # If true, removes all C-style block comments (/* ... */).
  remove_all_c_style_comments: false

  # If true, removes only the *first* C-style block comment if it's at the top of the file.
  remove_initial_comment: false

  # If true, removes lines matching the hex pattern.
  # If a string, each contiguous block of such lines is replaced with the string.
  remove_hex_pattern_lines: false

  # Regex-based text transformations. Each rule should provide:
  #   pattern: 'regex'
  #   replacement: 'replacement text'
  # Capture groups can be referenced in the replacement string, such as "\1".
  regex_snips: []
  # Example usage:
  # regex_snips:
  #   - pattern: '^\\s*DEBUG:.*$'
  #     replacement: ''

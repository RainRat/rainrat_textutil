# ================================================================
# Configuration for the File Combiner Tool
# ================================================================

# --- Search Parameters ---
search:
  # List of root folders to search for files.
  root_folders:
    - 'C:\Users\Guest\GitHub\myproject'

  # Whether to search recursively through subdirectories.
  recursive: true

  # List of file extensions to include.
  # If this list is empty or omitted, ALL file extensions will be included
  # (subject to the exclusion rules below). When pairing is enabled, this
  # option is ignored in favour of ``pairing.source_extensions`` and
  # ``pairing.header_extensions``.
  allowed_extensions:
      - '.py'

# --- Output Configuration ---
output:
  # The path for the final combined text file.
  file: 'combined_files.txt'

  # Add line numbers, starting at "1" in each file.
  add_line_numbers: false

# --- File Filtering ---
filters:
  # Files smaller than this (in bytes) will be skipped.
  min_size_bytes: 4

  # Files larger than this (in bytes) will be skipped.
  max_size_bytes: 204800 # 200 KiB

  # --- Inclusion Groups ---
  # Define groups of filenames that can be toggled on or off. When at least one
  # group is enabled, only files listed in enabled groups will be processed.
  inclusion_groups:
    core_files:
      enabled: true
      filenames:
        - 'sourcecombine.py'
        - 'utils.py'
    experimental_files:
      enabled: false
      filenames:
        - 'experimental.py'

  # --- Exclusion Rules ---
  # Files and folders matching these rules will be skipped.
  exclusions:
    # Exclude specific full filenames.
    filenames:
      - 'test.py'

    # Exclude all files with these extensions.
    extensions:

    # Exclude entire folders. Patterns match any part of the path
    # (e.g., 'build' excludes ./build and ./src/app/build). Case-sensitive.
    folders:
      - '.git'

# --- Content Processing Options ---
processing:
  # If true, attempts to clean up and compact whitespace.
  compact_whitespace: false

  # If true, removes all C-style block comments (/* ... */).
  remove_all_c_style_comments: false

  # If true, removes only the *first* C-style block comment if it's at the top of the file.
  remove_initial_c_style_comment: false

  # If true, removes lines matching the hex pattern.
  # If a string, each contiguous block of such lines is replaced with the string.
  remove_hex_pattern_lines: false

  # Regex-based text transformations. Each rule should provide:
  #   pattern: 'regex'
  #   replacement: 'replacement text'
  # Capture groups can be referenced in the replacement string, such as "\1".
  regex_replacements: []
  # Example usage:
  # regex_replacements:
  #   - pattern: '^\\s*#\\s*TODO:.*$'
  #     replacement: ''
  #   - pattern: '(?s).*BEGIN_SNIP(.*)END_SNIP.*'
  #     replacement: '\\1'
